{"version":3,"sources":["../../../../src/providers/calendarDateFormatter.provider.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,2BAA2B,EAAE,MAAM,wCAAwC,CAAC;AAErF;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH;IAA2C,yCAA2B;IAAtE;;IAAwE,CAAC;IAAD,4BAAC;AAAD,CAAxE,AAAyE,CAA9B,2BAA2B,GAAG","file":"calendarDateFormatter.provider.js","sourceRoot":"","sourcesContent":["import { CalendarNativeDateFormatter } from './calendarNativeDateFormatter.provider';\r\n\r\n/**\r\n * This class is responsible for all formatting of dates. There are 2 implementations available, the `CalendarNativeDateFormatter` (default) which will use the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl\" target=\"_blank\">Intl</a> API to format dates, or there is the `CalendarMomentDateFormatter` which uses <a href=\"http://momentjs.com/\" target=\"_blank\">moment</a>.\r\n *\r\n * If you wish, you may override any of the defaults via angulars DI. For example:\r\n *\r\n * ```typescript\r\n * import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\r\n *\r\n * class CustomDateFormatter extends CalendarDateFormatter {\r\n *\r\n *   public monthViewColumnHeader({date, locale}: DateFormatterParams): string {\r\n *     return new Intl.DateTimeFormat(locale, {weekday: 'short'}).format(date); // use short week days\r\n *   }\r\n *\r\n * }\r\n *\r\n * // in your component that uses the calendar\r\n * providers: [{\r\n *   provide: CalendarDateFormatter,\r\n *   useClass: CustomDateFormatter\r\n * }]\r\n * ```\r\n */\r\nexport class CalendarDateFormatter extends CalendarNativeDateFormatter {}"]}